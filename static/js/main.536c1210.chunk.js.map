{"version":3,"sources":["components/navigation/NavigationBar.js","components/bloodpressure/BPBar.js","components/bloodpressure/DailyInput.js","components/bloodpressure/BPInfo.js","components/bloodpressure/BloodPressure.js","components/historical/charts/BMIHistoricalChart.js","components/historical/cardsummary/StatCard.js","components/historical/charts/HRHistoricalChart.js","components/historical/charts/WeightHistoricalChart.js","components/historical/charts/BPHistoricalChart.js","components/historical/Historical.js","components/bmi/BMIDailyInput.js","components/bmi/BMI.js","App.js","reportWebVitals.js","index.js"],"names":["NavigationBar","className","to","BPBar","props","completed","bp","useState","percentBP","setPercentBP","bpMsg","setBpMsg","bpOffset","setBpOffset","prevPercentBPRef","useRef","useEffect","current","calculatePercentBP","parseInt","color","result","msg","Math","floor","categoryStyles","height","width","float","backgroundColor","divisionStyles","fontSize","textAlign","style","fontWeight","marginBottom","icon","faAngleDoubleDown","size","marginTop","borderRadius","categoryStylesRight","margin","DailyInput","handleChange","e","setState","target","name","value","validInput","x","num","Number","isInteger","err","console","log","state","weight","pulse","systolic","diastolic","sys","dia","weightErr","pulseErr","systolicErr","diastolicErr","showBPBar","today","Date","toLocaleString","year","month","day","handleSubmit","bind","saveBPData","a","preventDefault","this","onSubmit","type","placeholder","onChange","required","id","Component","BPInfo","hLine","widtd","background","BloodPressure","BMIHistoricalChart","bmiValues","dateArray","processBMI","data","bmiArray","map","bmi","response","d","date","dateValues","graphInfo","labels","fontColor","datasets","label","fill","lineTension","borderColor","borderWidth","options","title","display","text","legend","position","scales","yAxes","ticks","xAxes","animation","duration","StatCard","units","faIconComponent","padding","marginRight","marginLeft","HRHistoricalChart","hrValues","processHR","processDates","hrArray","hr","WeightHistoricalChart","weightValues","weightArray","BPHistoricalChart","sysValues","processSystolic","sysArray","Historical","border","overflow","top","faHeartbeat","faTachometerAlt","faWeight","faPercentage","BMIDailyInput","class","for","faMale","faFemale","BMI","App","from","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.536c1210.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './NavigationBar.css';\r\n\r\n\r\nexport default function NavigationBar() {\r\n\r\n    const nbStyle = {\r\n        fontSize: '1em',\r\n        justifyContent: 'space-between',\r\n        backgroundColor: '#282c34',\r\n        width: '100%',\r\n        display: 'flex',\r\n        float: 'right'\r\n    }\r\n\r\n    const ulStyle = {\r\n        display: 'flex',\r\n        listStyleType: 'none',\r\n        margin: 0,\r\n        padding: 0,\r\n        float: 'right'\r\n    }\r\n\r\n    return (\r\n            <div className='navigation-bar'>\r\n                <h1>React Fit</h1>\r\n                 <ul>\r\n                    <li>\r\n                        <Link to='/react-fit/historical'>Home</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to='/react-fit/bmi'>BMI</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to='/react-fit/bloodpressure'>Blood Pressure</Link>        \r\n                    </li>\r\n                </ul>\r\n            </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect, useRef, Fragment } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faAngleDoubleDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n// bootstrap doesn't work...wtf\r\n// figure out how to calculate percentBP before render\r\n// https://encycolorpedia.com/efe6f9\r\nexport default function BPBar(props) {\r\n    const { completed, bp} = props;\r\n    // get value of previous state\r\n    var[percentBP, setPercentBP] = useState(0);\r\n    var[bpMsg, setBpMsg] = useState(\"\");\r\n    var[bpOffset, setBpOffset] = useState(0);\r\n\r\n    const prevPercentBPRef = useRef();\r\n\r\n    useEffect(() =>{\r\n        prevPercentBPRef.current = percentBP;\r\n        setPercentBP(calculatePercentBP(bp)[0]);\r\n        setBpMsg(calculatePercentBP(bp)[1]);\r\n        setBpOffset(parseInt(calculatePercentBP(bp)[0]) + 1);\r\n    }, [props]);\r\n    \r\n    const prevPercentBP = prevPercentBPRef.current;\r\n    const calculatePercentBP = (bp) => {\r\n        \r\n        var result = 0;\r\n        var msg = \"\";\r\n        var output = [[result],[msg]];\r\n\r\n        // can turn this into object\r\n        if (bp <= 90){\r\n            result = Math.floor(bp/90 * 20);\r\n            msg = \"hypotension\";\r\n        } else if (bp > 90 && bp <= 120){\r\n            result = Math.floor(bp/120 * 40);\r\n            msg = \"normal range\";\r\n        } else if (bp > 120 && bp <= 140){\r\n            result = Math.floor(bp/140 * 60);\r\n            msg = \"prehypertension\";\r\n        } else if (bp > 140 && bp <= 160){\r\n            result = Math.floor(bp/160 * 80);\r\n            msg = \"stage 1 hypertension\";\r\n        } else if (bp > 160 && bp < 200){\r\n            result = Math.floor(bp/200 * 100);\r\n            msg = \"stage 2 hypertension\";\r\n        }\r\n        else {\r\n            result = 100;\r\n            msg = \"stage 2 hypertension\";\r\n        }\r\n        output = [[result],[msg]];\r\n\r\n        return output;\r\n    }\r\n\r\n    const containerStyles = {\r\n        height: 50,\r\n        width: '100%',\r\n        backgroundColor: \"#e0e0de\",\r\n        borderRadius: 25,\r\n    }\r\n\r\n    const fillerStyles = {\r\n        height: '100%',\r\n        width: `${completed}%`,\r\n        backgroundColor: '#FFFFFF',\r\n        borderRadius: 'inherit',\r\n        textAlign: 'right'\r\n    }\r\n\r\n    const labelStyles = {\r\n        padding: 5,\r\n        color: 'white',\r\n        fontWeight: 'bold'\r\n    }\r\n\r\n    var categoryStyles = (color) => ({\r\n        height: '100%',\r\n        width: `20%`,\r\n        float: 'left',\r\n        backgroundColor: `${color}`,\r\n    });\r\n\r\n    var categoryStylesLeft = (color) => ({\r\n        height: '100%',\r\n        width: `20%`,\r\n        float: 'left',\r\n        borderRadius: '25px 0px 0px 25px',\r\n        backgroundColor: `${color}`,\r\n    });\r\n    var categoryStylesRight = (color) => ({\r\n        height: '100%',\r\n        width: `20%`,\r\n        float: 'left',\r\n        borderRadius: '0px 25px 25px 0px',\r\n        backgroundColor: `${color}`,\r\n    });\r\n    \r\n    \r\n    var divisionStyles = {\r\n        width: '20%',\r\n        height: '100%',\r\n        fontSize: '0.5em',\r\n        float: 'left',\r\n        textAlign: 'right'\r\n    }\r\n\r\n    // var sliderStyles = (width) => ({\r\n    //     height: '100%',\r\n    //     fontSize: '0.75em',\r\n    //     position: 'left',\r\n    //     width: `${width}%`\r\n    // })\r\n\r\n    // initial colors\r\n    // var blue = '#96cafd';\r\n    // var green = '#77dd77';\r\n    // var yellow = '#fdfd96';\r\n    // var orange = '#ffb347';\r\n    // var red = '#c23b22';\r\n\r\n    // css dark mode theme?\r\n    // f8f5fc\r\n    // var great = '#decef2';\r\n    // var good = '#cdb5eb ';\r\n    // var ok = '#bb9ee4';\r\n    // var bad = '#a986dd';\r\n    // var terrible = '#966fd6';\r\n\r\n    return (\r\n\r\n\r\n\r\n        <Fragment>\r\n            <div style={{width: '80%'}}>\r\n                <div className=\"slider\" style={{width: `${bpOffset}%`, textAlign: 'right'}}>\r\n                    <div>\r\n                        <p style={{fontWeight: 'bold', marginBottom:0}}>{bp}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"slider\" style={{width: `${percentBP}%`, textAlign: 'right'}}>\r\n                    <div>\r\n                        <FontAwesomeIcon icon={faAngleDoubleDown} size=\"xs\" style={{marginTop:0}}></FontAwesomeIcon>\r\n                    </div>\r\n                </div>\r\n                <div className=\"bp-bar\" style={containerStyles}>\r\n                    <div className=\"bp-low\" style={categoryStylesLeft('#decef2')}></div>\r\n                    <div className=\"bp-low\" style={categoryStyles('#cdb5eb')}></div>\r\n                    <div className=\"bp-med\" style={categoryStyles('#bb9ee4')}></div>\r\n                    <div className=\"bp-med\" style={categoryStyles('#a986dd')}></div>\r\n                    <div className=\"bp-high\" style={categoryStylesRight('#966fd6')}></div>\r\n                </div>\r\n                <div className=\"bp-division\">\r\n                    <div style={divisionStyles}><p style={{fontSize: '1.5em'}}>90</p></div>\r\n                    <div style={divisionStyles}><p style={{fontSize: '1.5em'}}>120</p></div>\r\n                    <div style={divisionStyles}><p style={{fontSize: '1.5em'}}>140</p></div>\r\n                    <div style={divisionStyles}><p style={{fontSize: '1.5em'}}>160</p></div>\r\n                    <div style={divisionStyles}><p style={{fontSize: '1.5em'}}>200</p></div>\r\n                </div>\r\n                <div style={{height: '100px'}}>\r\n                    { bp != 0 ? <p style={{margin: \"1em\"}}>You are in <b>{bpMsg}</b> range</p> : <p style={{margin: \"1em\"}}></p>}\r\n                </div>\r\n            </div>\r\n            \r\n        </Fragment>\r\n    )\r\n}\r\n\r\n","import React, { Component, Fragment } from 'react';\r\nimport BPBar from './BPBar';\r\nimport '../../App.css';\r\n\r\nexport default class DailyInput extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            weight: \"\",\r\n            pulse: \"\",\r\n            systolic: \"\",\r\n            diastolic: \"\",\r\n            sys: 0,\r\n            dia: 0,\r\n            weightErr: false,\r\n            pulseErr: false,\r\n            systolicErr: false,\r\n            diastolicErr: false,\r\n            showBPBar: false,\r\n            \r\n            today: new Date().toLocaleString([], {year: 'numeric', month:'numeric', day:'numeric'})\r\n        }\r\n        \r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.saveBPData = this.saveBPData.bind(this);\r\n    }\r\n\r\n    saveBPData() {\r\n        \r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n\r\n    async handleSubmit(e) {\r\n        e.preventDefault(); // prevent page refresh\r\n        this.setState({\r\n            showBPBar: false\r\n        });\r\n        // validate only numbers\r\n        var {weight, \r\n            pulse,\r\n            systolic, \r\n            diastolic,\r\n            weightErr,\r\n            pulseErr,\r\n            systolicErr,\r\n            diastolicErr} = this.state;\r\n        \r\n        // this.setState(this.validInput(weight) ? {weightErr: false} : {weightErr: true});\r\n        await this.setState(this.validInput(weight) ? {weightErr: false} : {weightErr: true});\r\n        await this.setState(this.validInput(pulse) ? {pulseErr: false} : {pulseErr: true});\r\n        await this.setState(this.validInput(systolic) ? {systolicErr: false} : {systolicErr: true});\r\n        await this.setState(this.validInput(diastolic) ? {diastolicErr: false} : {diastolicErr: true});\r\n        \r\n        if (this.state.weightErr || this.state.pulseErr || this.state.systolicErr || this.state.diastolicErr){\r\n            await this.setState({\r\n                showBPBar: false\r\n            })\r\n        } else {\r\n            await this.setState({\r\n                sys: parseInt(systolic,10),\r\n                dia: parseInt(diastolic, 10),\r\n                showBPBar: true\r\n            })   \r\n        }\r\n    }\r\n\r\n    validInput = (x) => {\r\n        try {\r\n            var num = parseInt(x, 10);\r\n            if (!Number.isInteger(num) || num < 0){\r\n                return false;\r\n            }\r\n            return true;\r\n        } catch(err){\r\n            console.log(err);\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const {weight, pulse, systolic, diastolic, sys, dia, pulseErr, weightErr, systolicErr, diastolicErr} = this.state;\r\n        var today = this.state.today;\r\n        var placeHolderWeight = \"input weight...\";\r\n        var placeHolderPulse = \"input pulse...\";\r\n        var placeHolderSys = \"input systolic pressure...\";\r\n        var placeHolderDia = \"input diastolic pressure...\";\r\n        var weightErrMsg = \"Please input a valid weight value\";\r\n        var pulseErrMsg = \"Please input a valid heart pulse value\";\r\n        var sysErrMsg = \"Please input a valid systolic value\";\r\n        var diaErrMsg = \"Please input a valid diastolic value\";\r\n    \r\n\r\n        return (\r\n            <Fragment>\r\n                <div style={{marginTop: '1.5em', marginBottom: '1em'}}>\r\n                    <h2>Today: {today}</h2>\r\n                </div>\r\n                <div className=\"container\">\r\n                    \r\n                    <div className=\"row\">\r\n                        <div className=\"col-3\">\r\n                            <h3>Weight</h3>\r\n                        </div>\r\n                        <div className=\"col-3\">\r\n                            <h3>Pulse</h3>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <h3>BP</h3>\r\n                        </div>\r\n                    </div>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-3\">\r\n                                <input \r\n                                    className=\"form-control border-0 shadow-none\" \r\n                                    type=\"text\"\r\n                                    name=\"weight\"\r\n                                    placeholder={placeHolderWeight}\r\n                                    value={weight}\r\n                                    onChange={this.handleChange} \r\n                                    required/>\r\n                                    {weightErr ? <p id=\"error\">{weightErrMsg}</p> : <p></p>}\r\n                            </div>\r\n                            <div className=\"col-3\">\r\n                                <input \r\n                                    className=\"form-control border-0 shadow-none\" \r\n                                    type=\"text\"\r\n                                    name=\"pulse\"\r\n                                    placeholder={placeHolderPulse}\r\n                                    value={pulse}\r\n                                    onChange={this.handleChange} \r\n                                    required/>\r\n                                    {pulseErr ? <p id=\"error\">{pulseErrMsg}</p> : <p id=\"error\"></p>}\r\n                            </div>\r\n                            <div className=\"col-3\">\r\n                                <input \r\n                                    className=\"form-control border-0 shadow-none\" \r\n                                    type=\"text\" \r\n                                    name=\"systolic\" \r\n                                    placeholder={placeHolderSys}\r\n                                    value={systolic}\r\n                                    onChange={this.handleChange} \r\n                                    required/>\r\n                                    {systolicErr ? <p id=\"error\">{sysErrMsg}</p> : <p></p>}\r\n                            </div>\r\n                            <div className=\"col-3\">\r\n                                <input \r\n                                    className=\"form-control border-0 shadow-none\" \r\n                                    type=\"text\" \r\n                                    name=\"diastolic\" \r\n                                    placeholder={placeHolderDia}\r\n                                    value={diastolic}\r\n                                    onChange={this.handleChange} \r\n                                    required/>\r\n                                    {diastolicErr ? <p id=\"error\">{diaErrMsg}</p> : <p></p>}\r\n                            </div>\r\n                        </div>\r\n                        <button className=\"btn btn-light\" type=\"submit\">Check Blood Pressure</button>\r\n                    </form>\r\n                </div>\r\n\r\n                <BPBar bp={sys}></BPBar>\r\n\r\n                {/* { this.state.showBPBar ?  <div style={{margin: \"1em\"}}>\r\n                                                <button \r\n                                                    className=\"btn btn-light\" \r\n                                                    onClick={this.saveBPData}>Save Data\r\n                                                </button>\r\n                                            </div>\r\n                                        : <div style={{margin: \"2em\"}}></div> }*/\r\n                }\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Fragment } from 'react'\r\nimport '../../App.css';\r\n\r\nexport default function BPInfo() {\r\n\r\n    var hLine = (color) => ({\r\n        widtd: '80%',\r\n        height: '15px',\r\n        borderRadius: '25px',\r\n        background: `${color}`,\r\n        margin: 'auto'\r\n    });\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"container\">\r\n                \r\n            <table>\r\n                <tbody>\r\n                <tr>\r\n                    <th>Colour</th>\r\n                    <th>Type</th>\r\n                    <th>Systolic</th>\r\n                    <th>Diastolic</th>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <div style={hLine('#decef2')}></div>\r\n                    </td>\r\n                    <td>Hypotension</td>\r\n                    <td>&lt;90</td>\r\n                    <td>&lt;60</td>\r\n\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <div style={hLine('#cdb5eb')}></div>\r\n                    </td>\r\n                    <td>Normal</td>\r\n                    <td>90-120</td>\r\n                    <td>61-80</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <div style={hLine('#bb9ee4')}></div>\r\n                    </td>\r\n                    <td>Prehypertension</td>\r\n                    <td>121-140</td>\r\n                    <td>81-90</td>\r\n                    \r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <div style={hLine('#a986dd')}></div>\r\n                    </td>\r\n                    <td>Stage 1 Hypertension</td>\r\n                    <td>141-160</td>\r\n                    <td>91-100</td>\r\n                    \r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <div style={hLine('#966fd6')}></div>\r\n                    </td>\r\n                    <td>Stage 2 Hypertension</td>\r\n                    <td>&gt;160</td>\r\n                    <td>&gt;100</td>\r\n                    \r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n            </div>\r\n        </Fragment>\r\n        \r\n    )\r\n}\r\n","import React, { Component, Fragment } from 'react'\r\nimport DailyInput from './DailyInput'\r\nimport BPInfo from './BPInfo';\r\n\r\nexport class BloodPressure extends Component {\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <DailyInput/>\r\n                <BPInfo/>\r\n            </Fragment>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default BloodPressure\r\n","import React, { Component } from 'react'\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nexport class BMIHistoricalChart extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = ({\r\n            bmiValues: [],\r\n            dateArray: []\r\n        });\r\n\r\n        this.processBMI = this.processBMI.bind(this);\r\n\r\n    }\r\n    componentDidMount() {\r\n        let response = [\r\n            {\r\n                \"date\": \"2/10/2021\",\r\n                \"bmi\": 24.1\r\n            },\r\n            {\r\n                \"date\": \"2/9/2021\",\r\n                \"bmi\": 21.1\r\n            },\r\n            {\r\n                \"date\": \"2/8/2021\",\r\n                \"bmi\": 22.1\r\n            },\r\n            {\r\n                \"date\": \"2/7/2021\",\r\n                \"bmi\": 24.1\r\n            },\r\n            {\r\n                \"date\": \"2/6/2021\",\r\n                \"bmi\": 23.1\r\n            },\r\n        ]\r\n\r\n        this.processBMI(response);\r\n    }\r\n\r\n    processBMI(data) {\r\n        var bmiArray = data.map(bmi => bmi.bmi);\r\n        this.setState({\r\n            bmiValues: bmiArray\r\n        })\r\n    }\r\n\r\n    processDates(response) {\r\n        var dateArray = response.map(d => d.date)\r\n\r\n        this.setState({\r\n            dateValues: dateArray\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const { dateArray, bmiValues } = this.state;\r\n\r\n        var graphInfo = {\r\n            labels: dateArray,\r\n            fontColor: '#FFFFFF',\r\n\r\n            datasets: [\r\n                {\r\n                    label: 'BMI',\r\n                    fill: false,\r\n                    lineTension: 0.5,\r\n                    backgroundColor: '#966fd6',\r\n                    borderColor: '#966fd6',\r\n                    borderWidth: 3,\r\n                    data: bmiValues,\r\n                    fill: true\r\n                }\r\n            ]\r\n        }\r\n\r\n        return (\r\n            <div style={{background: '#333842', borderRadius: '10px'}}>\r\n                <Line\r\n                    data={graphInfo}\r\n\r\n                    width={600}\r\n                    height={250}\r\n                    fontColor='#FFFFFF'\r\n                    options={{\r\n                        title: {\r\n                            display: true,\r\n                            text: 'BMI',\r\n                            fontSize: 30,\r\n                            fontColor: '#FFFFFF'\r\n                        },\r\n                        legend: {\r\n                            labels: {\r\n                                fontColor: '#FFFFFF',\r\n                                fontSize: 20\r\n                            },\r\n                            display: true,\r\n                            position: 'bottom'\r\n                        },\r\n                        scales: {\r\n                            yAxes: [{\r\n                                ticks: {\r\n                                    fontColor: '#FFFFFF'\r\n                                }\r\n                            }],\r\n                            xAxes: [{\r\n                                ticks: {\r\n                                    fontColor: '#FFFFFF'\r\n                                }\r\n                            }]\r\n                        },\r\n                        animation: {\r\n                            duration: 2000\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BMIHistoricalChart\r\n","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHeartbeat, faWeight, faTachometerAlt, faPercentage } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default function StatCard(props) {\r\n\r\n    const {\r\n        title,\r\n        value,\r\n        units,\r\n        faIconComponent,\r\n        date\r\n    } = props\r\n\r\n    var cardStyle = {\r\n        // border: '1px solid #FFFFFF',\r\n        height: '100%',\r\n        width: '20%',\r\n        display: 'inline-block',\r\n        padding: '0.5em',\r\n        marginRight: '1em',\r\n        marginLeft: '1em',\r\n        background: '#333842',\r\n        borderRadius: '10px'\r\n    }\r\n\r\n    var bpStyle = {\r\n        fontSize: '2em',\r\n        fontWeight: 'bold',\r\n        display: 'inline'\r\n    }\r\n    \r\n    var icon = \"faHeartbeat\"\r\n\r\n    return (\r\n        <div style={cardStyle}>\r\n            <div>\r\n                <h1>{title}</h1>\r\n            </div>\r\n\r\n            <FontAwesomeIcon icon={faIconComponent} size=\"2x\"></FontAwesomeIcon>\r\n            <span style={{ marginRight: '1em' }}></span>\r\n            <h1 style={bpStyle}>{value}</h1><p style={{ fontSize: '0.5em', display: 'inline' }}> {units}</p>\r\n            <p style={{ fontSize: '0.75em', color: '#c2c2c2', marginTop: '0.2em' }}>{date}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import axios from 'axios';\r\nimport React, { Component } from 'react'\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nexport class HRHistoricalChart extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = ({\r\n            dateValues: [],\r\n            hrValues: []\r\n        });\r\n        \r\n        this.processHR = this.processHR.bind(this);\r\n    }\r\n    \r\n    componentDidMount(){\r\n        // execute api request\r\n        // let url = \"https://raw.githubusercontent.com/andrewh-code/react-fit/main/mockdata/heartrate/historical_heart_rate.json\";\r\n        // axios.get(url).then((response) => {\r\n        //     console.log(response);\r\n        // })\r\n        \r\n        let response = [\r\n            {\r\n                \"date\": \"2/10/2021\",\r\n                \"hr\": 66,\r\n            },\r\n            {\r\n                \"date\": \"2/9/2021\",\r\n                \"hr\": 66,\r\n            },\r\n            {\r\n                \"date\": \"2/8/2021\",\r\n                \"hr\": 65,\r\n            },\r\n            {\r\n                \"date\": \"2/7/2021\",\r\n                \"hr\": 64,\r\n            },\r\n            {\r\n                \"date\": \"2/6/2021\",\r\n                \"hr\": 68,\r\n            },\r\n            {\r\n                \"date\": \"2/5/2021\",\r\n                \"hr\": 80,\r\n            },\r\n            {\r\n                \"date\": \"2/4/2021\",\r\n                \"hr\": 61,\r\n            },\r\n            {\r\n                \"date\": \"2/3/2021\",\r\n                \"hr\": 59,\r\n            },\r\n            {\r\n                \"date\": \"2/2/2021\",\r\n                \"hr\": 58,\r\n            },\r\n            {\r\n                \"date\": \"2/1/2021\",\r\n                \"hr\": 55,\r\n            }\r\n        ];\r\n        this.processHR(response);\r\n        this.processDates(response);\r\n        \r\n    }\r\n\r\n    // process systolic data for array\r\n    processHR(response) {\r\n        var hrArray = response.map(hr => hr.hr);\r\n        this.setState({\r\n            hrValues: hrArray\r\n        });\r\n    }\r\n\r\n    processDates(response) {\r\n        var dateArray = response.map(hr => hr.date)\r\n\r\n        this.setState({\r\n            dateValues: dateArray\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const { dateValues, hrValues } = this.state;\r\n\r\n        var graphInfo = {\r\n            labels: dateValues,\r\n            fontColor: '#FFFFFF',\r\n\r\n            datasets: [\r\n              {\r\n                label: 'Heart Rate',\r\n                fill: false,\r\n                lineTension: 0.5,\r\n                backgroundColor: '#966fd6',\r\n                borderColor: '#966fd6',\r\n                borderWidth: 3,\r\n                data: hrValues,\r\n              }\r\n            ]\r\n          }\r\n\r\n\r\n        return (\r\n            <div style={{background: '#333842', borderRadius: '10px'}}>\r\n                <Line\r\n                    data={graphInfo}\r\n\r\n                    width={600}\r\n                    height={250}\r\n                    fontColor='#FFFFFF'\r\n                    options={{\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Heart Rate',\r\n                            fontSize: 30,\r\n                            fontColor: '#FFFFFF'\r\n                        },\r\n                        legend: {\r\n                            labels: {\r\n                                fontColor: '#FFFFFF',\r\n                                fontSize: 20\r\n                            },\r\n                            display: true,\r\n                            position: 'bottom'\r\n                        },\r\n                        scales: {\r\n                            yAxes: [{\r\n                                ticks: {\r\n                                    fontColor: '#FFFFFF'\r\n                                }\r\n                            }],\r\n                            xAxes: [{\r\n                                ticks: {\r\n                                    fontColor: '#FFFFFF'\r\n                                }\r\n                            }]\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HRHistoricalChart\r\n","import React, { Component } from 'react'\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nexport class WeightHistoricalChart extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = ({\r\n            dateValues: [],\r\n            weightValues: []\r\n        });\r\n        \r\n        this.processHR = this.processHR.bind(this);\r\n        this.processDates = this.processDates.bind(this);\r\n    }\r\n    \r\n    componentDidMount(){\r\n        // execute api request\r\n        let response = [\r\n            {\r\n                \"date\": \"2/10/2021\",\r\n                \"hr\": 150,\r\n            },\r\n            {\r\n                \"date\": \"2/9/2021\",\r\n                \"hr\": 151,\r\n            },\r\n            {\r\n                \"date\": \"2/8/2021\",\r\n                \"hr\": 152,\r\n            },\r\n            {\r\n                \"date\": \"2/7/2021\",\r\n                \"hr\": 153,\r\n            },\r\n            {\r\n                \"date\": \"2/6/2021\",\r\n                \"hr\": 154,\r\n            },\r\n            {\r\n                \"date\": \"2/5/2021\",\r\n                \"hr\": 156,\r\n            },\r\n            {\r\n                \"date\": \"2/4/2021\",\r\n                \"hr\": 154,\r\n            },\r\n            {\r\n                \"date\": \"2/3/2021\",\r\n                \"hr\": 153,\r\n            },\r\n            {\r\n                \"date\": \"2/2/2021\",\r\n                \"hr\": 152,\r\n            },\r\n            {\r\n                \"date\": \"2/1/2021\",\r\n                \"hr\": 150,\r\n            }\r\n        ];\r\n        this.processHR(response);\r\n        this.processDates(response);\r\n        \r\n    }\r\n\r\n    // process systolic data for array\r\n    processHR(response) {\r\n        var weightArray = response.map(hr => hr.hr);\r\n        this.setState({\r\n            weightValues: weightArray\r\n        });\r\n    }\r\n\r\n    processDates(response) {\r\n        var dateArray = response.map(hr => hr.date)\r\n\r\n        this.setState({\r\n            dateValues: dateArray\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const { dateValues, weightValues } = this.state;\r\n\r\n        var graphInfo = {\r\n            labels: dateValues,\r\n            fontColor: '#FFFFFF',\r\n\r\n            datasets: [\r\n              {\r\n                label: 'Weight',\r\n                fill: false,\r\n                lineTension: 0.5,\r\n                backgroundColor: '#966fd6',\r\n                borderColor: '#966fd6',\r\n                borderWidth: 3,\r\n                data: weightValues,\r\n              }\r\n            ]\r\n          }\r\n\r\n\r\n        return (\r\n            <div style={{background: '#333842', borderRadius: '10px'}}>\r\n                <Line\r\n                    data={graphInfo}\r\n\r\n                    width={600}\r\n                    height={250}\r\n                    fontColor='#FFFFFF'\r\n                    options={{\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Weight',\r\n                            fontSize: 30,\r\n                            fontColor: '#FFFFFF'\r\n                        },\r\n                        legend: {\r\n                            labels: {\r\n                                fontColor: '#FFFFFF',\r\n                                fontSize: 20\r\n                            },\r\n                            display: true,\r\n                            position: 'bottom'\r\n                        },\r\n                        scales: {\r\n                            yAxes: [{\r\n                                ticks: {\r\n                                    fontColor: '#FFFFFF'\r\n                                }\r\n                            }],\r\n                            xAxes: [{\r\n                                ticks: {\r\n                                    fontColor: '#FFFFFF'\r\n                                }\r\n                            }]\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WeightHistoricalChart\r\n","import React, { Component } from 'react'\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nexport class BPHistoricalChart extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = ({\r\n            dateValues: [],\r\n            sysValues: []\r\n        });\r\n        \r\n        this.processSystolic = this.processSystolic.bind(this);\r\n        this.processDates = this.processDates.bind(this);\r\n    }\r\n    \r\n    componentDidMount(){\r\n        // execute api request\r\n        let response = [\r\n            {\r\n                \"date\": \"2/10/2021\",\r\n                \"systolic\": 80,\r\n                \"diastolic\": 80,\r\n                \"heartRate\": 66\r\n            },\r\n            {\r\n                \"date\": \"2/9/2021\",\r\n                \"systolic\": 90,\r\n                \"diastolic\": 80,\r\n                \"heartRate\": 66\r\n            },\r\n            {\r\n                \"date\": \"2/8/2021\",\r\n                \"systolic\": 100,\r\n                \"diastolic\": 80,\r\n                \"heartRate\": 66\r\n            },\r\n            {\r\n                \"date\": \"2/7/2021\",\r\n                \"systolic\": 112,\r\n                \"diastolic\": 80,\r\n                \"heartRate\": 66\r\n            },\r\n            {\r\n                \"date\": \"2/6/2021\",\r\n                \"systolic\": 120,\r\n                \"diastolic\": 80,\r\n                \"heartRate\": 66\r\n            },\r\n            {\r\n                \"date\": \"2/5/2021\",\r\n                \"systolic\": 130,\r\n                \"diastolic\": 80,\r\n                \"heartRate\": 66\r\n            },\r\n            {\r\n                \"date\": \"2/4/2021\",\r\n                \"systolic\": 140,\r\n                \"diastolic\": 80,\r\n                \"heartRate\": 66\r\n            },\r\n            {\r\n                \"date\": \"2/3/2021\",\r\n                \"systolic\": 145,\r\n                \"diastolic\": 80,\r\n                \"heartRate\": 66\r\n            },\r\n            {\r\n                \"date\": \"2/2/2021\",\r\n                \"systolic\": 145,\r\n                \"diastolic\": 80,\r\n                \"heartRate\": 66\r\n            },\r\n            {\r\n                \"date\": \"2/1/2021\",\r\n                \"systolic\": 150,\r\n                \"diastolic\": 80,\r\n                \"heartRate\": 66\r\n            }\r\n        ];\r\n        this.processSystolic(response);\r\n        this.processDates(response);\r\n    }\r\n\r\n    // process systolic data for array\r\n    processSystolic(response) {\r\n        var sysArray = response.map(sys => sys.systolic);\r\n        this.setState({\r\n            sysValues: sysArray\r\n        });\r\n    }\r\n\r\n    processDates(response) {\r\n        var dateArray = response.map(d => d.date)\r\n\r\n        this.setState({\r\n            dateValues: dateArray\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const { dateValues, sysValues } = this.state;\r\n        var diaValues = [80,90,90,70,90,100,80,70, 60, 100]\r\n\r\n        var graphInfo = {\r\n            labels: dateValues,\r\n            fontColor: '#FFFFFF',\r\n\r\n            datasets: [\r\n              {\r\n                label: 'Systolic',\r\n                fill: false,\r\n                lineTension: 0.5,\r\n                backgroundColor: '#966fd6',\r\n                borderColor: '#966fd6',\r\n                borderWidth: 3,\r\n                data: sysValues,\r\n              },\r\n              {\r\n                label: 'Diastolic',\r\n                fill: false,\r\n                lineTension: 0.5,\r\n                backgroundColor: '#FFFFFF',\r\n                borderColor: '#FFFFFF',\r\n                borderWidth: 3,\r\n                data: diaValues,\r\n              }\r\n            ]\r\n          }\r\n\r\n\r\n        return (\r\n            <div style={{background: '#333842', borderRadius: '10px'}}>\r\n                <Bar\r\n                    data={graphInfo}\r\n\r\n                    width={600}\r\n                    height={250}\r\n                    fontColor='#FFFFFF'\r\n                    options={{\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Blood Pressure',\r\n                            fontSize: 30,\r\n                            fontColor: '#FFFFFF'\r\n                        },\r\n                        legend: {\r\n                            labels: {\r\n                                fontColor: '#FFFFFF',\r\n                                fontSize: 20\r\n                            },\r\n                            display: true,\r\n                            position: 'bottom'\r\n                        },\r\n                        scales: {\r\n                            yAxes: [{\r\n                                ticks: {\r\n                                    fontColor: '#FFFFFF'\r\n                                }\r\n                            }],\r\n                            xAxes: [{\r\n                                ticks: {\r\n                                    fontColor: '#FFFFFF'\r\n                                }\r\n                            }]\r\n                        },\r\n                        animation: {\r\n                            duration: 2000\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BPHistoricalChart\r\n","import React, { Fragment } from 'react'\r\nimport BMIHistoricalChart from './charts/BMIHistoricalChart.js';\r\nimport StatCard from './cardsummary/StatCard.js';\r\nimport { faHeartbeat, faWeight, faTachometerAlt, faPercentage } from '@fortawesome/free-solid-svg-icons';\r\nimport HRHistoricalChart from './charts/HRHistoricalChart.js';\r\nimport WeightHistoricalChart from './charts/WeightHistoricalChart.js';\r\nimport BPHistoricalChart from './charts/BPHistoricalChart.js';\r\n\r\nfunction Historical() {\r\n\r\n    var cardContainerStyle = {\r\n        height: '7em',\r\n        padding: '0.25em'\r\n    }\r\n    //dummy data\r\n    var systolic = 120;\r\n    var diastolic = 80;\r\n    var bp = systolic + \"/\" + diastolic;\r\n    var hr = 66;\r\n    var bmi = 24.1;\r\n    var weight = 200;\r\n    var date = \"01/01/2020\";\r\n\r\n    return (\r\n        <Fragment>\r\n            <div style={{border: '1px solid white', width: '90%', overflow: 'hidden', top: '10vh', position: 'fixed'}}>\r\n                <div style={cardContainerStyle}>\r\n                    <StatCard title=\"Heart Rate\" value={hr} units=\"bpm\" faIconComponent={faHeartbeat} date={date}/>\r\n                    <StatCard title=\"Blood Pressure\" value={bp} units=\"mmHG\" faIconComponent={faTachometerAlt} date={date}/>\r\n                    <StatCard title=\"Weight\" value={weight} units=\"lb\" faIconComponent={faWeight} date={date}/>\r\n                    <StatCard title=\"BMI\" value={bmi} units=\"lb/in^2\" faIconComponent={faPercentage} date={date}/>\r\n                </div>\r\n            </div>\r\n            \r\n            <div style={{border: '1px solid white', width: '90%', overflow: 'hidden', top: '31vh', position: 'fixed', padding: '0.25em'}}>\r\n                <div style={{width: '40%', float: 'left', marginRight: '1em', marginLeft: '4.5em'}}>\r\n                    <BPHistoricalChart/>\r\n                </div>\r\n                <div style={{width: '40%', float: 'right', marginRight: '4.5em', marginLeft: '1em'}}>\r\n                    <BMIHistoricalChart/>\r\n                </div>\r\n            </div>\r\n\r\n            <div style={{border: '1px solid white', width: '90%', overflow: 'hidden', top: '66vh', position: 'fixed', padding: '0.25em'}}>                \r\n                <div style={{width: '40%', float: 'left', marginRight: '1em', marginLeft: '4.5em'}}>\r\n                    <HRHistoricalChart/>\r\n                </div>\r\n                <div style={{width: '40%', float: 'right', marginRight: '4.5em', marginLeft: '1em'}}>\r\n                    <WeightHistoricalChart/>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n        \r\n    )\r\n}\r\n\r\nexport default Historical","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMale, faFemale } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport class BMIDailyInput extends Component {\r\n    \r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <form>\r\n                    \r\n                    <div class=\"form-check form-check-inline\">\r\n                        <input class=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio1\" value=\"option1\" />\r\n                        <label class=\"form-check-label\" for=\"inlineRadio1\">Male</label>\r\n                    </div>\r\n\r\n                    <div class=\"form-check form-check-inline\">\r\n                        <input class=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"option2\" />\r\n                        <label class=\"form-check-label\" for=\"inlineRadio2\">Female</label>\r\n                    </div>\r\n                    <div>\r\n                        <FontAwesomeIcon icon={faMale} size=\"10x\" />\r\n                        <FontAwesomeIcon icon={faFemale} size=\"10x\" />\r\n                    </div>\r\n                </form>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BMIDailyInput\r\n","import React, { Component } from 'react'\r\nimport BMIDailyInput from './BMIDailyInput'\r\n\r\nexport class BMI extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <BMIDailyInput/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BMI\r\n","import './App.css';\nimport { Component } from 'react';\nimport NavigationBar from './components/navigation/NavigationBar';\nimport BloodPressure from './components/bloodpressure/BloodPressure';\nimport { Route, BrowserRouter as Router, Redirect} from 'react-router-dom';\nimport Historical from './components/historical/Historical';\nimport BMI from './components/bmi/BMI';\n\nexport default class App extends Component {\n\n  render() {\n    var white = \"#FFFFFF\";\n    return (\n      <Router>\n        <div className=\"App\">\n          <NavigationBar />\n          <header className=\"App-header\">\n            <Redirect from='/' to='/react-fit'/>\n            <Route exact path = \"/react-fit\" component = { Historical }/>\n            <Route exact path = \"/react-fit/bloodpressure\" component = { BloodPressure }/>\n            <Route exact path = \"/react-fit/bmi\" component = { BMI }/>\n            <Route exact path=\"/react-fit/historical\" component = { Historical }/>\n          </header>\n        </div>\n      </Router>\n    );\n  }\n\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}